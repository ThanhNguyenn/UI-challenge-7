{"version":3,"sources":["logo.svg","components/Types/Types.jsx","components/Settings/Settings.jsx","components/DropdownItem/DropdownItem.jsx","components/Days/Days.jsx","components/Page/Page.jsx","App.js","reportWebVitals.js","index.js"],"names":["Types","DropdownItem","itemName","checked","Dropdown","Item","className","type","autoClose","Toggle","variant","id","Menu","map","item","Settings","useState","toggleSwitch","setToggleSwitch","onChange","e","height","width","handleDiameter","onHandleColor","offHandleColor","uncheckedIcon","checkedIcon","offColor","onColor","boxShadow","size","Days","Page","App","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"2QAAe,I,kCCKFA,EAAQ,WACjB,IAmBMC,EAAe,SAAC,GAAyB,IAAxBC,EAAuB,EAAvBA,SAAUC,EAAa,EAAbA,QAC7B,OACI,mCACI,eAACC,EAAA,EAASC,KAAV,CAAeC,UAAU,wBAAzB,UACI,uBAAOA,UAAU,kBAAkBC,KAAK,WAAWJ,QAASA,IAAU,sBAAMG,UAAU,qBACtF,sBAAMA,UAAU,cAAhB,SAA+BJ,UAO/C,OACI,qBAAKI,UAAU,mBAAf,SAEI,eAACF,EAAA,EAAD,CAAUI,UAAU,UAApB,UACI,cAACJ,EAAA,EAASK,OAAV,CAAkBH,UAAU,gBAAgBI,QAAQ,eAAeC,GAAG,6BAAtE,uBACA,cAACP,EAAA,EAASQ,KAAV,CAAeN,UAAU,4BAAzB,SApCC,CACT,CACIJ,SAAU,oBACVC,SAAS,GAEb,CACID,SAAU,WACVC,SAAS,GAEb,CACID,SAAU,qBACVC,SAAS,GAEb,CACID,SAAU,WACVC,SAAS,IAsBKU,KAAI,SAAAC,GAAI,OAAI,cAACb,EAAD,CAAcC,SAAUY,EAAKZ,SAAUC,QAASW,EAAKX,qB,wDCjC9EY,EAAW,WACpB,MAAwCC,oBAAS,GAAjD,mBAAOC,EAAP,KAAqBC,EAArB,KAKA,OACI,sBAAKZ,UAAU,sBAAf,UACG,iCACI,+BAAI,cAAC,IAAD,IAAJ,gBAEH,cAAC,IAAD,CAAQH,QAASc,EACjBE,SATa,SAACC,GAClBF,EAAgBE,IASZC,OAAQ,GACRC,MAAO,GACPC,eAAgB,GAChBC,cAAc,UACdC,eAAe,UACfC,cAAc,GACdC,YAAY,GACZC,SAAS,UACTC,QAAQ,UACRC,UAAU,mCAEV,eAAC1B,EAAA,EAAD,WACI,eAACA,EAAA,EAASK,OAAV,CAAiBH,UAAU,2DAA3B,UAAsF,cAAC,IAAD,CAAiByB,KAAK,SAA5G,mBACA,eAAC3B,EAAA,EAASQ,KAAV,WACI,cAACR,EAAA,EAASC,KAAV,mBACA,cAACD,EAAA,EAASC,KAAV,0BAGZ,uBACI,eAACD,EAAA,EAAD,WACI,eAACA,EAAA,EAASK,OAAV,CAAiBH,UAAU,2DAA3B,UAAsF,cAAC,IAAD,CAAQyB,KAAK,SAAnG,qBACA,eAAC3B,EAAA,EAASQ,KAAV,WACI,cAACR,EAAA,EAASC,KAAV,sBACA,cAACD,EAAA,EAASC,KAAV,sBACA,cAACD,EAAA,EAASC,KAAV,qBACA,cAACD,EAAA,EAASC,KAAV,sBACA,cAACD,EAAA,EAASC,KAAV,mCC/CPJ,EAAe,SAAC,GAAwB,IAAvBC,EAAsB,EAAtBA,SAASC,EAAa,EAAbA,QACnC,OACI,mCACI,sBAAKG,UAAU,wBAAf,UACI,uBAAOA,UAAU,kBAAkBC,KAAK,WAAWJ,QAASA,IAAU,sBAAMG,UAAU,qBACtF,sBAAMA,UAAU,cAAhB,SAA+BJ,UCDlC8B,G,MAAO,WAoChB,OACI,qBAAK1B,UAAU,kBAAf,SACI,iCACI,mBAAGA,UAAU,aAAb,kBApCC,CACT,CACGJ,SAAU,SACVC,SAAS,GAEZ,CACID,SAAU,UACVC,SAAS,GAEZ,CACGD,SAAU,YACVC,SAAS,GAEZ,CACGD,SAAU,WACVC,SAAS,GAEZ,CACGD,SAAU,SACVC,SAAS,GAEZ,CACGD,SAAU,WACVC,SAAS,GAEZ,CACGD,SAAU,SACVC,SAAS,IAUCU,KAAI,SAAAC,GAAI,OAAI,cAAC,EAAD,CAAcZ,SAAUY,EAAKZ,SAAUC,QAASW,EAAKX,aACvE,wBAAQG,UAAU,YAAYC,KAAK,QAAnC,uCC1CH0B,EAAO,WAGhB,OACI,sBAAK3B,UAAU,kBAAf,UACI,cAAC,EAAD,IACA,cAAC,EAAD,IACA,cAAC,EAAD,QCCG4B,MARf,WACE,OACE,8BACE,cAAC,EAAD,OCISC,EAZS,SAAAC,GAClBA,GAAeA,aAAuBC,UACxC,6BAAqBC,MAAK,YAAkD,IAA/CC,EAA8C,EAA9CA,OAAQC,EAAsC,EAAtCA,OAAQC,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,OAAQC,EAAc,EAAdA,QAC3DJ,EAAOH,GACPI,EAAOJ,GACPK,EAAOL,GACPM,EAAON,GACPO,EAAQP,OCDdQ,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,EAAD,MAEFC,SAASC,eAAe,SAM1Bb,M","file":"static/js/main.aad3ba6d.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React, {useState} from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport './Types_Styled.css'\n\n\nexport const Types = () => {\n    const info = [\n        {\n            itemName: \"Product Discovery\", \n            checked: true,\n        },\n        {\n            itemName: \"Software\", \n            checked: false,\n        },\n        {\n            itemName: \"Service Management\", \n            checked: false,\n        },\n        {\n            itemName: \"Business\", \n            checked: false,\n        }\n    ]\n\n    const DropdownItem = ({itemName, checked}) => {\n        return (\n            <>\n                <Dropdown.Item className=\"types--container-item\">\n                    <input className=\"types--checkbox\" type=\"checkbox\" checked={checked}/><span className=\"types--checkmark\"></span>\n                    <span className=\"types--text\">{itemName}</span>\n                </Dropdown.Item>\n            </>\n        )\n    }\n\n\n    return (\n        <div className=\"types--container\">\n\n            <Dropdown autoClose=\"outside\">\n                <Dropdown.Toggle  className=\"types--toggle\" variant=\"outline-dark\" id=\"dropdown-autoclose-outside\">All Types</Dropdown.Toggle>\n                <Dropdown.Menu className=\"types--dropdown-container\">\n                    {info.map(item => <DropdownItem itemName={item.itemName} checked={item.checked}/> )}\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    )\n}\n","import React, {useState} from 'react'\nimport { Dropdown } from 'react-bootstrap'\nimport { BsFlag } from \"react-icons/bs\";\nimport { RiMoonClearLine } from \"react-icons/ri\";\nimport Switch from 'react-switch'\nimport './Settings_Styled.css'\nimport { BiArrowBack } from \"react-icons/bi\";\n\n\n\nexport const Settings = () => {\n    const [toggleSwitch, setToggleSwitch] = useState(false);\n\n    const handleChange = (e) => {\n        setToggleSwitch(e);\n    }\n    return (\n        <div className=\"settings--container\">\n           <header>\n               <h3><BiArrowBack />Settings</h3>\n           </header>\n            <Switch checked={toggleSwitch} \n            onChange={handleChange}\n            height={16}\n            width={48}\n            handleDiameter={27}\n            onHandleColor=\"#f876b4\"\n            offHandleColor=\"#f876b4\"\n            uncheckedIcon=\"\"\n            checkedIcon=\"\"\n            offColor=\"#FFFFFF\"\n            onColor=\"#f876b4\"\n            boxShadow=\"0px 1px 5px rgba(0, 0, 0, 0.6)\"\n            />\n            <Dropdown>\n                <Dropdown.Toggle className=\"settings--toggle-background settings--toggle-color-black\"><RiMoonClearLine size='22px'/> Toggle theme</Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item>Dark</Dropdown.Item>\n                    <Dropdown.Item>Light</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        <br />\n            <Dropdown>\n                <Dropdown.Toggle className=\"settings--toggle-background settings--toggle-color-black\"><BsFlag size=\"22px\" />Choose language</Dropdown.Toggle>\n                <Dropdown.Menu>\n                    <Dropdown.Item>English</Dropdown.Item>\n                    <Dropdown.Item>Spanish</Dropdown.Item>\n                    <Dropdown.Item>French</Dropdown.Item>\n                    <Dropdown.Item>Chinese</Dropdown.Item>\n                    <Dropdown.Item>Vietnamese</Dropdown.Item>\n                </Dropdown.Menu>\n            </Dropdown>\n        </div>\n    )\n}\n","import React from 'react'\nimport '../Types/Types_Styled.css'\nexport const DropdownItem = ({itemName,checked}) => {\n    return (\n        <>\n            <div className=\"types--container-item\">\n                <input className=\"types--checkbox\" type=\"checkbox\" checked={checked}/><span className=\"types--checkmark\"></span>\n                <span className=\"types--text\">{itemName}</span>\n            </div>\n        </>\n    )\n}\n\n","import React from 'react'\nimport { DropdownItem } from '../DropdownItem/DropdownItem'\nimport { BsFillArrowUpLeftSquareFill } from 'react-icons/bs'\nimport './Days_Styled.css'\n\n\nexport const Days = () => {\n    const infos = [\"Monday\",\"Tuesday\",\"Wednesday\",\"Thursday\",\"Friday\",\"Saturday\",\"Sunday\"] \n    \n    const info = [\n        {\n           itemName: \"Monday\",\n           checked: false,  \n        },\n        {\n            itemName: \"Tuesday\",\n            checked: true,  \n         },\n         {\n            itemName: \"Wednesday\",\n            checked: false,  \n         },\n         {\n            itemName: \"Thursday\",\n            checked: true,  \n         },\n         {\n            itemName: \"Friday\",\n            checked: false,  \n         },\n         {\n            itemName: \"Saturday\",\n            checked: false,  \n         },\n         {\n            itemName: \"Sunday\",\n            checked: false,  \n         },\n     \n    ]\n    \n    \n    return (\n        <div className=\"days--container\">\n            <form>\n                <p className=\"days--text\">Days</p>\n                {info.map(item => <DropdownItem itemName={item.itemName} checked={item.checked}/>)}\n                <button className=\"days--btn\" type=\"reset\">Remove all filters</button>\n            </form>\n        </div>\n    )\n}\n","import React, {useState} from 'react'\nimport { Types } from '../Types/Types'\nimport { Settings } from '../Settings/Settings'\nimport { Days } from '../Days/Days'\n\nexport const Page = () => {\n\n\n    return (\n        <div className=\"page--container\">\n            <Types />\n            <Settings />\n            <Days />\n        </div>\n    )\n}\n","import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\nimport { Page } from './components/Page/Page';\n\nfunction App() {\n  return (\n    <div>\n      <Page />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}